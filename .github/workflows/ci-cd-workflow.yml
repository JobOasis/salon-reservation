# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

    - name: Build with Gradle Wrapper
      run: |
        chmod +x ./gradlew  # gradlew에 실행 권한 부여
        ./gradlew build

    - name: Upload JAR file  # JAR 파일을 업로드
      uses: actions/upload-artifact@v4
      with:
        name: app
        path: salon-reservation/build/libs/salon-reservation-0.0.1-SNAPSHOT.jar

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download JAR file
        uses: actions/download-artifact@v4
        with:
          name: app

      - name: Deploy to EC2
        env:
          EC2_USER: ${{ secrets.EC2_USER }}  # EC2 사용자
          EC2_HOST: ${{ secrets.EC2_HOST }}  # EC2 호스트
          RDS_HOST: ${{ secrets.RDS_HOST }}  # RDS 호스트
          RDS_PORT: ${{ secrets.RDS_PORT }}  # RDS 포트
          RDS_USER: ${{ secrets.RDS_USER }}  # RDS 사용자
          RDS_PASSWORD: ${{ secrets.RDS_PASSWORD }}  # RDS 비밀번호
          EC2_KEY: ${{ secrets.EC2_KEY }}  # EC2 키 파일 경로
        run: |
          echo "$EC2_KEY" > ec2_key.pem
          chmod 600 ec2_key.pem
          scp -o StrictHostKeyChecking=no -i ec2_key.pem build/libs/salon-reservation-0.0.1-SNAPSHOT.jar $EC2_USER@$EC2_HOST:/home/ubuntu/salon-reservation-0.0.1-SNAPSHOT.jar
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem $EC2_USER@$EC2_HOST << 'EOF'
            nohup java -jar /home/ubuntu/salon-reservation-0.0.1-SNAPSHOT.jar --spring.datasource.url=jdbc:mysql://${RDS_HOST}:${RDS_PORT}/salon --spring.datasource.username=${RDS_USER} --spring.datasource.password=${RDS_PASSWORD} > /home/ubuntu/nohup.out 2>&1 &
          EOF
          
    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
    #   with:
    #     gradle-version: '8.9'
    #
    # - name: Build with Gradle 8.9
    #   run: gradle build

  dependency-submission:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
    # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
    - name: Generate and submit dependency graph
      uses: gradle/actions/dependency-submission@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
